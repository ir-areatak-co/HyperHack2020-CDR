const jsrsa = require('jsrsasign')
const { KEYUTIL } = jsrsa

/**
 * generates key-pair of the specified length using ECDSA algorithm
 * @note supported key size is 256, 384
 * @note function throws an error if key size is not supported
 * @param keysize length of key
 * @returns resolves key-pair Object consists of: prvKeyObj, pubKeyObj, each consists of:
 * type: always equals to 'ECDSA'
 * exparams: parametrs which key pair generated by (such as curve name)
 * prvKeyHex: private key in hex format for private key and null for public key
 * prvKeyPem: private key in hex format for private key and null for public key
 * pubKeyHex: public key in hex format
 * pubKeyPem: public key in pem format
 * isPrivate: true for private key and false for public key
 */
module.exports = keySize => {
  return new Promise((resolve, reject) => {
    if (keySize !== 256 && keySize !== 384) { reject(new Error('invalid key size to generate ECDSA key pair')) }

    const curveName = `secp${keySize}r1`
    const keypair = KEYUTIL.generateKeypair('EC', curveName)

    const prvKeyObj = {
      type: 'ECDSA',
      ecparams: keypair.prvKeyObj.ecparams,
      prvKeyHex: keypair.prvKeyObj.prvKeyHex,
      prvKeyPem: KEYUTIL.getPEM(keypair.prvKeyObj, 'PKCS8PRV'),
      pubKeyHex: keypair.prvKeyObj.pubKeyHex,
      pubKeyPem: KEYUTIL.getPEM(keypair.pubKeyObj),
      isPrivate: true
    }

    const pubKeyObj = {
      type: 'ECDSA',
      ecparams: keypair.prvKeyObj.ecparams,
      prvKeyHex: null,
      prvKeyPem: null,
      pubKeyHex: keypair.pubKeyObj.pubKeyHex,
      pubKeyPem: KEYUTIL.getPEM(keypair.pubKeyObj),
      isPrivate: false
    }

    resolve({
      prvKeyObj,
      pubKeyObj
    })
  })
}
